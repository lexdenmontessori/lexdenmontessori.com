// Generated by CoffeeScript 1.4.0
(function() {

  define(["require", "exports", "module", "public/vendor/tipsy/src/javascripts/jquery.tipsy.js", "lib/calculator", "lib/format"],
      function(require, exports, module) {
    var CalculatorUI, calculator, changeText, days, dismissHint, format, myHide, myShow, parseTime, tryHint;
    calculator = require("lib/calculator");
    format = require("lib/format");
    days = ["mon", "tue", "wed", "thu", "fri"];
    parseTime = function(s) {
      var hm;
      hm = s.split(":");
      return parseInt(hm[0], 10) + (parseInt(hm[1], 10) / 60);
    };
    changeText = function(el, text, cb) {
      if (el.html() !== text) {
        return el.animate({
          opacity: 0
        }, 200, function() {
          el.html(text);
          el.animate({
            opacity: 1
          }, 200);
          if (cb) {
            return cb();
          }
        });
      } else {
        if (cb) {
          return cb();
        }
      }
    };
    myShow = function(id) {
      var el;
      el = $(id);
      el.css("display", "");
      return el.animate({
        opacity: 1
      }, 1000);
    };
    myHide = function(id) {
      var el;
      el = $(id);
      return el.animate({
        opacity: 0
      }, 1000, function() {
        if (el.css("opacity") === 0) {
          return el.css("display", "none");
        }
      });
    };
    tryHint = function(id, turn_on) {
      if (turn_on && !$(id).hasClass("dismissed")) {
        return myShow(id);
      } else {
        return myHide(id);
      }
    };
    dismissHint = function(id) {
      $(id).addClass("dismissed");
      return myHide(id);
    };
    CalculatorUI = (function() {

      function CalculatorUI(ready) {
        var day, fn, _i, _j, _len, _len1,
          _this = this;
        this.input = {
          child: {
            dob: $("input[name=child\\.dob]"),
            siblingHours: $("input[name=child\\.siblingHours]"),
            forename: $("input[name=child\\.forename]"),
            surname: $("input[name=child\\.surname]")
          },
          term: $("select[name=term\\.which]"),
          attendance: {
            start: $("input[name=attendance\\.start]"),
            end: $("input[name=attendance\\.end]")
          }
        };
        this.input.pattern = {};
        for (_i = 0, _len = days.length; _i < _len; _i++) {
          day = days[_i];
          this.input.pattern[day] = {
            start: $("select[name=" + day + "\\.start]"),
            end: $("select[name=" + day + "\\.end]"),
            lunch: $("input[name=" + day + "\\.lunch]"),
            dinner: $("input[name=" + day + "\\.dinner]")
          };
        }
        this.output = {
          hints: {
            minimumSessions: $("#hintMinimumSessions")
          },
          child: {
            forename: $(".childForename"),
            fullname: $(".childFullname")
          },
          basic: {
            termlyFee: $("#basicTermlyFee"),
            weeklyHours: $("#weeklyHours"),
            weeklyDaysAttending: $("#weeklyDaysAttending"),
            weeklySessions: $("#weeklySessions"),
            minimumSessions: $("#minimumSessions"),
            requiredExtraSessions: $("#requiredExtraSessions")
          },
          discount: {
            weeklyFamilyHours: $("#weeklyFamilyHours"),
            percentageDiscount: $("#percentageDiscount"),
            termlyDiscount: $("#termlyDiscount")
          },
          funding: {
            ageAtFundingCutoff: $("#ageAtFundingCutoff"),
            eligible: $("#eligibleForFunding"),
            weeklyFundableHours: $("#weeklyFundableHours"),
            weeklyFundedHours: $("#weeklyFundedHours"),
            weeklyFunding: $("#weeklyFunding"),
            fundedWeeks: $("#fundedWeeks"),
            termlyFunding: $("#termlyFunding")
          },
          payment: {
            upfront: {
              extraPerPayment: $(".paymentUpfrontExtra"),
              dates: $(".paymentUpfrontDates"),
              count: $(".paymentUpfrontCount"),
              extraPerTerm: $(".paymentUpfrontExtraPerTerm"),
              totalPerTerm: $(".paymentUpfrontTotalPerTerm"),
              totalPerPayment: $(".paymentUpfrontTotalPerPayment")
            },
            monthly: {
              extraPerPayment: $(".paymentMonthlyExtraPerPayment"),
              dates: $(".paymentMonthlyDates"),
              count: $(".paymentMonthlyCount"),
              extraPerTerm: $(".paymentMonthlyExtraPerTerm"),
              totalPerTerm: $(".paymentMonthlyTotalPerTerm"),
              totalPerPayment: $(".paymentMonthlyTotalPerPayment")
            },
            chosen: {
              type: $(".paymentChosenType"),
              extraPerPayment: $(".paymentChosenExtraPerPayment"),
              dates: $(".paymentChosenDates"),
              count: $(".paymentChosenCount"),
              extraPerTerm: $(".paymentChosenExtraPerTerm"),
              totalPerTerm: $(".paymentChosenTotalPerTerm"),
              totalPerPayment: $(".paymentChosenTotalPerPayment"),
              method: $(".paymentChosenMethod")
            }
          },
          summary: {
            summaryBox: $("#summaryBox"),
            hourlyFee: $(".hourlyFee")
          },
          term: {
            name: $(".termName"),
            dates: $("#termDates"),
            holes: $("#termHoles"),
            fees: {
              morning: $("#termFeesMorning"),
              afternoon: $("#termFeesAfternoon"),
              full: $("#termFeesFull"),
              hour: $("#termFeesHour")
            },
            discount: {
              perHour: $("#termDiscountPerHour"),
              maxPercentage: $(".termDiscountMaxPercentage")
            },
            funding: {
              headcount: $("#termFundingHeadcount"),
              cutoff: $("#termFundingCutoff"),
              minimumAge: $("#termFundingMinimumAge"),
              perHour: $("#termFundingPerHour"),
              maxWeeks: $("#termFundingMaxWeeks")
            },
            minimumAge: $(".termMinimumAge")
          },
          termlyFee: $(".termlyFee")
        };
        this.output.basic.days = {};
        for (_j = 0, _len1 = days.length; _j < _len1; _j++) {
          day = days[_j];
          this.output.basic.days[day] = {
            session: $("#" + day + "\\.session"),
            extraHours: $("#" + day + "\\.extraHours"),
            dailyFee: $("#" + day + "\\.dailyFee"),
            daysThisTerm: $("#" + day + "\\.daysThisTerm"),
            termlyFee: $("#" + day + "\\.termlyFee")
          };
        }
        this.input.child.dob.datepicker({
          dateFormat: "dd/mm/yy",
          firstDay: 1,
          changeYear: true
        });
        this.input.attendance.start.datepicker({
          dateFormat: "dd/mm/yy",
          firstDay: 1
        });
        this.input.attendance.end.datepicker({
          dateFormat: "dd/mm/yy",
          firstDay: 1
        });
        fn = function() {
          return $(this).parent().children("p.tipText").text();
        };
        $(".tipName").tipsy({
          title: fn,
          opacity: 1
        });
        this.input.term.tipsy({
          title: fn,
          trigger: "manual",
          gravity: "w",
          opacity: 1
        });
        this.input.child.dob.tipsy({
          title: fn,
          trigger: "manual",
          gravity: "w",
          opacity: 1
        });
        this.input.child.dob.tipsy("show");
        this.input.child.dob.change(function() {
          return _this.input.child.dob.tipsy(!_this.input.child.dob.datepicker("getDate") ? "show" : "hide");
        });
        $.get("public/terms.yml", function(yml) {
          var data, id, setNames, termId, _l, _len3;
          data = jsyaml.load(yml);
          _this.terms = {};
          var inOrder = [];

          // Ignore terms that ended more than six months ago
          var cutoff = new Date();
          cutoff.setTime(cutoff.getTime() - 6*31*24*60*60*1000);

          for (var terms = data.terms, k = 0, l = terms.length; k < l; k++) {
            var term = new calculator.Term(terms[k]);
            if (!term.archived(cutoff)) {
              id = term.generate_id();
              _this.terms[id] = term;
              inOrder.push(id);
            }
          }
          inOrder.sort();

          _this.input.term.append("<option value=''></option>");
          for (_l = 0, _len3 = inOrder.length; _l < _len3; _l++) {
            termId = inOrder[_l];
            _this.input.term.append("<option value='" + termId + "'>" + (_this.terms[termId].fullName()) + "</option>");
          }
          _this.input.term.change(function() {
            term = _this.gatherTerm();
            if (term) {
              myShow(".termInfo");
              _this.input.attendance.start.datepicker("setDate", term.dates.interval.start);
              _this.input.attendance.end.datepicker("setDate", term.dates.interval.end);
              return _this.displayTerm(term);
            } else {
              return myHide(".termInfo");
            }
          });
          $("input,select").change(function() {
            return _this.recalc();
          });
          setNames = function() {
            var forename, fullname, surname;
            forename = _this.input.child.forename.val();
            surname = _this.input.child.surname.val();
            fullname = forename + " " + surname;
            _this.output.child.forename.text(forename);
            return _this.output.child.fullname.text(fullname);
          };
          _this.input.child.forename.change(setNames);
          _this.input.child.surname.change(setNames);
          term = _this.gatherTerm();
          if (term) {
            myShow(".termInfo");
            _this.input.attendance.start.datepicker("setDate", term.dates.interval.start);
            _this.input.attendance.end.datepicker("setDate", term.dates.interval.end);
            _this.displayTerm(term);
          } else {
            myHide(".termInfo");
          }
          _this.recalc();
          return ready();
        });
      }

      CalculatorUI.prototype.showStage = function(stage) {
        var s, _i, _j, _ref;
        for (s = _i = 1; 1 <= stage ? _i <= stage : _i >= stage; s = 1 <= stage ? ++_i : --_i) {
          myShow(".stage" + s);
        }
        for (s = _j = _ref = stage + 1; _ref <= 5 ? _j <= 5 : _j >= 5; s = _ref <= 5 ? ++_j : --_j) {
          myHide(".stage" + s);
        }
        if (stage < 4) {
          return this.output.summary.summaryBox.animate({
            "margin-bottom": "-" + this.output.summary.summaryBox.css("height")
          }, 1000);
        } else {
          return this.output.summary.summaryBox.animate({
            "margin-bottom": "0px"
          }, 1000);
        }
      };

      CalculatorUI.prototype.gatherTerm = function() {
        return this.terms[this.input.term.val()];
      };

      CalculatorUI.prototype.gatherPattern = function() {
        var day, o, _i, _len;
        o = {};
        for (_i = 0, _len = days.length; _i < _len; _i++) {
          day = days[_i];
          o[day] = {
            start: parseTime(this.input.pattern[day].start.val()),
            end: parseTime(this.input.pattern[day].end.val()),
            lunch: this.input.pattern[day].lunch.prop("checked"),
            dinner: this.input.pattern[day].dinner.prop("checked")
          };
        }
        return o;
      };

      CalculatorUI.prototype.fromNull = function(ifNull, maybeNull) {
        if (maybeNull) {
          return maybeNull;
        } else {
          return ifNull;
        }
      };

      CalculatorUI.prototype.gather = function() {
        return {
          child: {
            dob: this.input.child.dob.datepicker("getDate"),
            siblingHours: this.fromNull(0, parseInt(this.input.child.siblingHours[0].value))
          },
          pattern: this.gatherPattern(),
          term: this.gatherTerm(),
          attendance: {
            start: this.input.attendance.start.datepicker("getDate"),
            end: this.input.attendance.end.datepicker("getDate")
          },
          payment: {
            method: $("input[name=payment]:checked").val()
          }
        };
      };

      CalculatorUI.prototype.displayBasic = function(basic, fees) {
        var day, pat, _ref;
        _ref = basic.pattern;
        for (day in _ref) {
          pat = _ref[day];
          changeText(this.output.basic.days[day].session, format.sessionName(pat.session));
          changeText(this.output.basic.days[day].extraHours, format.blankIfZero(pat.extraHours.total));
          changeText(this.output.basic.days[day].dailyFee, format.dailyFeeText(pat, fees));
          changeText(this.output.basic.days[day].daysThisTerm, pat.daysThisTerm.toString());
          changeText(this.output.basic.days[day].termlyFee, format.currencyIgnoringZero(pat.fees.termlyFee));
        }
        changeText(this.output.basic.termlyFee, format.currency(basic.termlyFee));
        changeText(this.output.basic.weeklyHours, basic.weeklyHours.toString());
        changeText(this.output.basic.weeklyDaysAttending, basic.weeklyDaysAttending.toString());
        changeText(this.output.basic.weeklySessions, basic.weeklySessions.toString());
        changeText(this.output.basic.minimumSessions, format.pluralize(basic.minimumSessions, "session"));
        changeText(this.output.basic.requiredExtraSessions, basic.requiredExtraSessions.toString());

        this.output.hints.minimumSessions.text(
          (basic.requiredExtraSessions === 0 ? "" :
           basic.weeklySessions        === 0 ? "Please choose " + format.pluralize(basic.requiredExtraSessions, 'session') + "." :
                                               format.pluralize(basic.requiredExtraSessions, 'session') + " to go …"));

        this.output.hints.minimumSessions.css("display", (basic.requiredExtraSessions === 0 ? "none" : "inline"));
      };

      CalculatorUI.prototype.displayDiscount = function(discount) {
        changeText(this.output.discount.weeklyFamilyHours, discount.weeklyFamilyHours.toString());
        changeText(this.output.discount.percentageDiscount, format.scaledPercentage(discount.percentageDiscount));
        return changeText(this.output.discount.termlyDiscount, format.currency(discount.perTerm));
      };

      CalculatorUI.prototype.displayFunding = function(funding) {
        changeText(this.output.funding.ageAtFundingCutoff, (funding.funded ? funding.age.toString() : "—"));
        changeText(this.output.funding.eligible, format.yesNo(funding.eligible));
        changeText(this.output.funding.weeklyFundableHours, funding.weeklyFundableHours.toString());
        changeText(this.output.funding.weeklyFundedHours, funding.weeklyFundedHours.toString());
        changeText(this.output.funding.fundedWeeks, funding.fundedWeeks.toString());
        changeText(this.output.funding.weeklyFunding, format.currency(funding.perWeek));
        return changeText(this.output.funding.termlyFunding, format.currency(funding.perTerm));
      };

      CalculatorUI.prototype.displayPayment = function(payment) {
        var opt, _i, _len, _ref;
        _ref = ["upfront", "monthly", "chosen"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          opt = _ref[_i];
          changeText(this.output.payment[opt].extraPerPayment, format.currency(payment[opt].extraPerPayment));
          changeText(this.output.payment[opt].dates, format.dateList(payment[opt].dates));
          changeText(this.output.payment[opt].count, payment[opt].count.toString());
          changeText(this.output.payment[opt].extraPerTerm, format.currency(payment[opt].extraPerTerm));
          changeText(this.output.payment[opt].totalPerTerm, format.currency(payment[opt].totalPerTerm));
          changeText(this.output.payment[opt].totalPerPayment, format.currency(payment[opt].totalPerPayment));
        }
        return changeText(this.output.payment.chosen.method, payment.chosen.method);
      };

      CalculatorUI.prototype.displaySummary = function(summary) {
        return changeText(this.output.summary.hourlyFee, format.currency(summary.hourlyFee));
      };

      CalculatorUI.prototype.displayValidity = function(validity) {
        this.input.term.tipsy(!validity.oldEnough ? "show" : "hide");
        if (!validity.oldEnough) {
          return this.showStage(2);
        } else if (!validity.valid) {
          return this.showStage(3);
        } else {
          return this.showStage(4);
        }
      };

      CalculatorUI.prototype.displayTerm = function(term) {
        var field, s, _i, _j, _len, _len1, _ref, _ref1;
        if (term.type === "holiday") {
          myShow("#hintFlexibleHoliday");
        } else {
          myHide("#hintFlexibleHoliday");
        }
        this.output.term.name.text(term.fullName());
        this.output.term.dates.text("Runs " + term.dates.interval.toString(4) + ".");
        this.output.term.holes.text("Does not include " + format.fullStop(term.dates.holesToString(2)));
        _ref = ["morning", "afternoon", "full", "hour"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          this.output.term.fees[s].text(format.currency(term.fees[s]));
        }
        this.output.term.discount.perHour.text(format.scaledPercentage(term.discount.perHour));
        this.output.term.discount.maxPercentage.text(format.scaledPercentage(term.discount.maxPercentage));
        if (term.funding.funded) {
          this.output.term.funding.headcount.text(format.date(term.funding.headcount));
          this.output.term.funding.cutoff.text(format.date(term.funding.cutoff));
          this.output.term.funding.minimumAge.text(term.funding.minimumAge);
          this.output.term.funding.perHour.text(format.currency(term.funding.perHour));
          this.output.term.funding.maxWeeks.text(term.funding.maxWeeks);
        } else {
          _ref1 = ["headcount", "cutoff", "minimumAge", "perHour", "maxWeeks"];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            field = _ref1[_j];
            this.output.term.funding[field].text("n.a.");
          }
        }
        return this.output.term.minimumAge.text(term.minimumAge.toString());
      };

      CalculatorUI.prototype.display = function(calcd, from) {
        this.displayBasic(calcd.basic, from.term.fees);
        this.displayDiscount(calcd.discount);
        this.displayFunding(calcd.funding);
        this.displayPayment(calcd.payment);
        this.displaySummary(calcd.summary);
        this.displayValidity(calcd.validity);
        return this.output.termlyFee.text(format.currency(calcd.termlyFee));
      };

      CalculatorUI.prototype.recalc = function() {
        var f;
        f = this.gather();
        if (!f.child.dob) {
          return this.showStage(1);
        } else if (!f.term || !f.attendance.start || !f.attendance.end) {
          return this.showStage(2);
        } else {
          return this.display(calculator.calculate(f), f);
        }
      };

      return CalculatorUI;

    })();
    $(function() {
      window.setTimeout((function() {
        return $("body").css("opacity", 1);
      }), 1000);
      return window.calculatorUI = new CalculatorUI(function() {});
    });
    return exports;
  });

}).call(this);
