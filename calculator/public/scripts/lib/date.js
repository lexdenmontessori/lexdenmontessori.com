// Generated by CoffeeScript 1.4.0
(function() {

  define(["require", "exports", "module", "lib/format"], function(require, exports, module) {
    var DaySet, Interval, bankHolidays, clone, d, datesEqual, format, isBankHoliday, lastWeek, latestPayableDate, leq, nextMonth, nextWeek, payableDate, weekday, weekend, yesterday;
    format = require("lib/format");
    clone = function(obj) {
      var Clone, c;
      Clone = (function() {});
      Clone.prototype = obj;
      c = new Clone();
      c.constructor = Clone;
      return c;
    };
    exports.lastWeek = lastWeek = function(d) {
      var o;
      o = new Date(d);
      o.setDate(o.getDate() - 7);
      return o;
    };
    exports.nextWeek = nextWeek = function(d) {
      var o;
      o = new Date(d);
      o.setDate(o.getDate() + 7);
      return o;
    };
    exports.yesterday = yesterday = function(d) {
      var o;
      o = new Date(d);
      o.setDate(o.getDate() - 1);
      return o;
    };
    exports.nextMonth = nextMonth = function(d) {
      var o;
      o = new Date(d);
      o.setMonth(o.getMonth() + 1);
      return o;
    };
    exports.datesEqual = datesEqual = function(a, b) {
      return a.getTime() === b.getTime();
    };
    exports.weekday = weekday = function(d) {
      var o;
      o = d.getDay() - 1;
      if (o === -1) {
        return 6;
      } else {
        return o;
      }
    };
    exports.weekend = weekend = function(d) {
      var _ref;
      return (_ref = weekday(d)) === 5 || _ref === 6;
    };
    exports.bankHolidays = bankHolidays = (function() {
      var _i, _len, _ref, _results;
      _ref = ["2010-01-01", "2010-04-02", "2010-04-05", "2010-05-03", "2010-05-31", "2010-08-30", "2010-12-27", "2010-12-28", "2011-01-03", "2011-04-22", "2011-04-25", "2011-04-29", "2011-05-02", "2011-05-30", "2011-08-29", "2011-12-26", "2011-12-27", "2012-01-02", "2012-04-06", "2012-04-09", "2012-05-07", "2012-06-04", "2012-06-05", "2012-08-27", "2012-12-25", "2012-12-26", "2013-01-01", "2013-03-29", "2013-04-01", "2013-05-06", "2013-05-27", "2013-08-26", "2013-12-25", "2013-12-26"];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        _results.push(new Date(d));
      }
      return _results;
    })();
    exports.isBankHoliday = isBankHoliday = function(d) {
      var hol, _i, _len;
      for (_i = 0, _len = bankHolidays.length; _i < _len; _i++) {
        hol = bankHolidays[_i];
        if (datesEqual(hol, d)) {
          return true;
        }
      }
      return false;
    };
    exports.payableDate = payableDate = function(d) {
      return !(isBankHoliday(d) || weekend(d));
    };
    exports.latestPayableDate = latestPayableDate = function(d) {
      if (payableDate(d)) {
        return d;
      } else {
        return latestPayableDate(yesterday(d));
      }
    };
    leq = function(a, b) {
      if (a.getFullYear() < b.getFullYear()) {
        return true;
      } else if (a.getFullYear() > b.getFullYear()) {
        return false;
      } else {
        if (a.getMonth() < b.getMonth()) {
          return true;
        } else if (a.getMonth() > b.getMonth()) {
          return false;
        } else {
          return a.getDate() <= b.getDate();
        }
      }
    };
    Interval = (function() {

      function Interval(a, b) {
        switch (arguments.length) {
          case 1:
            if (a instanceof Interval) {
              this.start = a.start;
              this.end = a.end;
            } else if (a instanceof Date || (typeof a === "string")) {
              this.start = new Date(a);
              this.end = new Date(a);
            } else if (a instanceof Object) {
              this.start = new Date(a.start || a[0]);
              this.end = new Date(a.end || a[1]);
            }
            break;
          case 2:
            this.start = new Date(a);
            this.end = new Date(b);
            break;
          default:
            throw new Error("Wrong arguments to Interval constructor");
        }
      }

      Interval.prototype.contains = function(d) {
        var e;
        e = new Date(d);
        return leq(this.start, e) && leq(e, this.end);
      };

      Interval.prototype.enumerate = function() {
        var i, o;
        i = new Date(this.start);
        o = [];
        while (leq(i, this.end)) {
          o.push(new Date(i));
          i.setDate(i.getDate() + 1);
        }
        return o;
      };

      Interval.prototype.years = function() {
        var s, y;
        y = 0;
        s = new Date(this.start);
        while (true) {
          s.setFullYear(s.getFullYear() + 1);
          if (s <= this.end) {
            y++;
          } else {
            break;
          }
        }
        return y;
      };

      Interval.prototype.months = function() {
        var m, s;
        m = 0;
        s = new Date(this.start);
        while (true) {
          s.setMonth(s.getMonth() + 1);
          if (s <= this.end) {
            m++;
          } else {
            break;
          }
        }
        return m;
      };

      Interval.prototype.days = function() {
        var s;
        d = 0;
        s = new Date(this.start);
        while (true) {
          s.setDate(s.getDate() + 1);
          if (s <= this.end) {
            d++;
          } else {
            break;
          }
        }
        return d;
      };

      Interval.prototype.weeks = function() {
        return Math.floor(this.days() / 7);
      };

      Interval.prototype.ymd = function() {
        var m, s, y;
        s = new Date(this.start);
        y = this.years();
        s.setFullYear(s.getFullYear() + y);
        m = new Interval(s, this.end).months();
        s.setMonth(s.getMonth() + m);
        d = new Interval(s, this.end).days();
        return {
          years: y,
          months: m,
          days: d
        };
      };

      Interval.prototype.toString = function(l) {
        var startFormat;
        if (l == null) {
          l = 2;
        }
        if (datesEqual(this.start, this.end)) {
          return format.date(this.start, l);
        } else if (this.start.getFullYear() !== this.end.getFullYear()) {
          return format.date(this.start, l) + "–" + format.date(this.end, l);
        } else {
          startFormat = clone(l);
          startFormat.year = false;
          return format.date(this.start, startFormat) + "–" + format.date(this.end, l);
        }
      };

      Interval.prototype.distributeMonthly = function() {
        var firsts;
        firsts = this.enumerate().filter(function(d) {
          return d.getDate() === 1;
        });
        if (firsts.length === 0) {
          return [new Date(this.start.getFullYear(), this.start.getMonth(), 1)];
        } else {
          return firsts.map(function(d) {
            return new Date(d.getFullYear(), d.getMonth() - 1, d.getDate());
          });
        }
      };

      return Interval;

    })();
    exports.Interval = Interval;
    DaySet = (function() {

      function DaySet(interval, holes) {
        var h;
        switch (arguments.length) {
          case 1:
            if (arguments[0] instanceof Object) {
              this.interval = arguments[0].interval;
              this.holes = arguments[0].holes;
            } else {
              throw new Error("Unknown arguments to DaySet constructor: " + arguments);
            }
            break;
          case 2:
            this.interval = interval;
            this.holes = holes;
            break;
          default:
            throw new Error("Unknown arguments to DaySet constructor: " + arguments);
        }
        this.interval = new Interval(this.interval);
        this.holes = (function() {
          var _i, _len, _ref, _results;
          _ref = this.holes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            h = _ref[_i];
            _results.push(new Interval(h));
          }
          return _results;
        }).call(this);
      }

      DaySet.prototype.contains = function(day) {
        var h, _i, _len, _ref;
        if (!this.interval.contains(day)) {
          return false;
        }
        _ref = this.holes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          h = _ref[_i];
          if (h.contains(day)) {
            return false;
          }
        }
        return true;
      };

      DaySet.prototype.enumerate = function() {
        var _i, _len, _ref, _results;
        _ref = this.interval.enumerate();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          if (this.contains(d)) {
            _results.push(d);
          }
        }
        return _results;
      };

      DaySet.prototype.holesToString = function(l) {
        var h;
        if (l == null) {
          l = 2;
        }
        return format.list((function() {
          var _i, _len, _ref, _results;
          _ref = this.holes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            h = _ref[_i];
            _results.push(h.toString(l));
          }
          return _results;
        }).call(this));
      };

      return DaySet;

    })();
    exports.DaySet = DaySet;
    return exports;
  });

}).call(this);
