// Generated by CoffeeScript 1.4.0
(function() {

  define(["require", "exports", "module"], function(require, exports, module) {
    var assert, format, vows;
    assert = require('assert');
    vows = require('vows');
    format = require("../lib/format");
    vows.describe("yesNo").addBatch({
      "true": {
        topic: function() {
          return true;
        },
        "is 'yes'": function(t) {
          return assert.deepEqual(format.yesNo(t), "yes");
        }
      },
      "false": {
        topic: function() {
          return false;
        },
        "is 'no'": function(f) {
          return assert.deepEqual(format.yesNo(f), "no");
        }
      }
    })["export"](module);
    vows.describe("currency").addBatch({
      "zero": {
        topic: 0,
        "displayed as £0.00": function(z) {
          return assert.deepEqual(format.currency(z), "£0.00");
        }
      },
      "one": {
        topic: 1,
        "displayed as £1.00": function(o) {
          return assert.deepEqual(format.currency(o), "£1.00");
        }
      },
      "random small positive": {
        topic: 4.56,
        "displayed as expected": function(r) {
          return assert.deepEqual(format.currency(r), "£4.56");
        }
      },
      "with too much precision": {
        topic: 7.3432,
        "displayed with two d.p.": function(t) {
          return assert.deepEqual(format.currency(t), "£7.34");
        }
      },
      "with precision to round up": {
        topic: 5.6789,
        "rounded up": function(r) {
          return assert.deepEqual(format.currency(r), "£5.68");
        }
      },
      "large figure": {
        topic: 735432.35,
        "has every three digits interspersed with commas": function(l) {
          return assert.deepEqual(format.currency(l), "£735,432.35");
        }
      },
      "small negative": {
        topic: -5,
        "has minus sign before £": function(n) {
          return assert.deepEqual(format.currency(n), "−£5.00");
        }
      },
      "negative with too much precision": {
        topic: -5.758,
        "is rounded up in the negative direction": function(s) {
          return assert.deepEqual(format.currency(s), "−£5.76");
        }
      },
      "large negative": {
        topic: -57865254.34674,
        "has every three digits interspersed with commas": function(l) {
          return assert.deepEqual(format.currency(l), "−£57,865,254.35");
        }
      },
      "NaN": {
        topic: NaN,
        "displayed as zero": function(n) {
          return assert.deepEqual(format.currency(n), "£0.00");
        }
      },
      "undefined": {
        topic: void 0,
        "displayed as zero": function(u) {
          return assert.deepEqual(format.currency(u), "£0.00");
        }
      },
      "null": {
        topic: null,
        "displayed as zero": function(u) {
          return assert.deepEqual(format.currency(u), "£0.00");
        }
      }
    })["export"](module);
    vows.describe("currencyIgnoringZero").addBatch({
      "zero": {
        topic: function() {
          return 0;
        },
        "displayed as —": function(z) {
          return assert.deepEqual(format.currencyIgnoringZero(z), "—");
        }
      },
      "positive": {
        topic: function() {
          return 3.65;
        },
        "displayed as normal": function(n) {
          return assert.deepEqual(format.currencyIgnoringZero(n), "£3.65");
        }
      },
      "negative": {
        topic: function() {
          return -4.85;
        },
        "displayed as normal": function(n) {
          return assert.deepEqual(format.currencyIgnoringZero(n), "−£4.85");
        }
      }
    })["export"](module);
    vows.describe("scaledPercentage").addBatch({
      "zero": {
        topic: function() {
          return 0;
        },
        "displayed as 0%": function(z) {
          return assert.deepEqual(format.scaledPercentage(z), "0%");
        }
      },
      "positive": {
        topic: function() {
          return 72.2;
        },
        "displayed as number followed by %": function(z) {
          return assert.deepEqual(format.scaledPercentage(z), "72.2%");
        }
      }
    })["export"](module);
    vows.describe("pluralize").addBatch({
      "zero things": {
        topic: function() {
          return [0, "thing"];
        },
        "displayed as '0 things'": function(a) {
          return assert.deepEqual(format.pluralize(a[0], a[1]), "0 things");
        }
      },
      "one thing": {
        topic: function() {
          return [1, "thing"];
        },
        "displayed as '1 thing'": function(a) {
          return assert.deepEqual(format.pluralize(a[0], a[1]), "1 thing");
        }
      },
      "many things": {
        topic: function() {
          return [42, "thing"];
        },
        "displayed as '42 things'": function(a) {
          return assert.deepEqual(format.pluralize(a[0], a[1]), "42 things");
        }
      }
    })["export"](module);
    vows.describe("date").addBatch({
      "today": {
        topic: function() {
          return new Date("2011-06-10");
        },
        "short": function(d) {
          return assert.deepEqual(format.date(d, {
            weekday: false,
            month: "abbr",
            year: false,
            separator: " "
          }), "10 Jun.");
        },
        "default": function(d) {
          return assert.deepEqual(format.date(d, {}), "10 Jun.");
        }
      }
    })["export"](module);
    vows.describe("dateList").addBatch({
      "couple of months": {
        topic: function() {
          return [new Date("2011-06-10"), new Date("2011-06-15"), new Date("2011-07-23")];
        },
        "ok": function(l) {
          return assert.deepEqual(format.dateList(l), "10 and 15 Jun.; 23 Jul.");
        }
      }
    })["export"](module);
    return exports;
  });

}).call(this);
